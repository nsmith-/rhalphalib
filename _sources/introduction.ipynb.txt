{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to rhalphabet\n",
    "\n",
    "What is the rhalphabet method?\n",
    "Well, at least the name comes from _rho_ alphabet, which refers to\n",
    "applying the _differential alphabet method_ in the dimensionless QCD\n",
    "scaling variable $\\rho = -2\\ln(m_{SD}/p_T)$ where $m_{SD}$ is the jet\n",
    "softdrop mass, and $p_T$ is the jet transverse momentum.\n",
    "\n",
    "So really, the question is: what is the _differential alphabet method_?\n",
    "Let's start with a review of the plain alphabet method, aka ABCD method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: ABCD demo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import rhalphalib as rl\n",
    "import numpy as np\n",
    "import hist\n",
    "import matplotlib.pyplot as plt\n",
    "import ROOT\n",
    "\n",
    "rng = np.random.default_rng(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<html>\n",
       "<div style=\"display:flex; align-items:center;\">\n",
       "<div style=\"width:290px;\">\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-10 -105 270 120\">\n",
       "<line x1=\"-5\" y1=\"0\" x2=\"255\" y2=\"0\" style=\"fill:none;stroke-width:2;stroke:currentColor\"/>\n",
       "<text text-anchor=\"middle\" x=\"0\" y=\"15\" style=\"fill:currentColor;\">\n",
       "0\n",
       "</text>\n",
       "<text text-anchor=\"middle\" x=\"250\" y=\"15\" style=\"fill:currentColor;\">\n",
       "100\n",
       "</text>\n",
       "<text text-anchor=\"middle\" x=\"125.0\" y=\"15\" style=\"fill:currentColor;\">\n",
       "mass [GeV]\n",
       "</text>\n",
       "<polyline points=\"  0,0   0,-0 12.5,-0 12.5,-0  25,-0  25,-0 37.5,-0 37.5,-0  50,-0  50,-0 62.5,-0 62.5,-0  75,-0  75,-12.5 87.5,-12.5 87.5,-33.3 100,-33.3 100,-62.5 112.5,-62.5 112.5,-100 125,-100 125,-100 137.5,-100 137.5,-87.5 150,-87.5 150,-16.7 162.5,-16.7 162.5,-0 175,-0 175,-4.17 187.5,-4.17 187.5,-0 200,-0 200,-0 212.5,-0 212.5,-0 225,-0 225,-0 237.5,-0 237.5,-0 250,-0 250,0\" style=\"fill:none; stroke:currentColor;\"/>\n",
       "</svg>\n",
       "</div>\n",
       "<div style=\"flex=grow:1;\">\n",
       "Regular(20, 0, 100, name='mass', label='mass [GeV]')<br/>\n",
       "<hr style=\"margin-top:.2em; margin-bottom:.2em;\"/>\n",
       "Double() Σ=100.0\n",
       "\n",
       "</div>\n",
       "</div>\n",
       "</html>"
      ],
      "text/plain": [
       "Hist(Regular(20, 0, 100, name='mass', label='mass [GeV]'), storage=Double()) # Sum: 100.0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal_hist = hist.Hist.new.Reg(20, 0, 100, name=\"mass\", label=\"mass [GeV]\").Double().fill(rng.normal(50, 10, 100))\n",
    "signal_hist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<html>\n",
       "<div style=\"display:flex; align-items:center;\">\n",
       "<div style=\"width:290px;\">\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-10 -105 270 120\">\n",
       "<line x1=\"-5\" y1=\"0\" x2=\"255\" y2=\"0\" style=\"fill:none;stroke-width:2;stroke:currentColor\"/>\n",
       "<text text-anchor=\"middle\" x=\"0\" y=\"15\" style=\"fill:currentColor;\">\n",
       "0\n",
       "</text>\n",
       "<text text-anchor=\"middle\" x=\"250\" y=\"15\" style=\"fill:currentColor;\">\n",
       "100\n",
       "</text>\n",
       "<text text-anchor=\"middle\" x=\"125.0\" y=\"15\" style=\"fill:currentColor;\">\n",
       "mass [GeV]\n",
       "</text>\n",
       "<polyline points=\"  0,0   0,-100 12.5,-100 12.5,-81  25,-81  25,-70 37.5,-70 37.5,-75  50,-75  50,-64 62.5,-64 62.5,-55  75,-55  75,-60 87.5,-60 87.5,-51 100,-51 100,-30 112.5,-30 112.5,-44 125,-44 125,-39 137.5,-39 137.5,-40 150,-40 150,-11 162.5,-11 162.5,-27 175,-27 175,-25 187.5,-25 187.5,-26 200,-26 200,-19 212.5,-19 212.5,-13 225,-13 225,-10 237.5,-10 237.5,-12 250,-12 250,0\" style=\"fill:none; stroke:currentColor;\"/>\n",
       "</svg>\n",
       "</div>\n",
       "<div style=\"flex=grow:1;\">\n",
       "Regular(20, 0, 100, name='mass', label='mass [GeV]')<br/>\n",
       "<hr style=\"margin-top:.2em; margin-bottom:.2em;\"/>\n",
       "Double() Σ=852.0 <em>(1000.0 with flow)</em>\n",
       "\n",
       "</div>\n",
       "</div>\n",
       "</html>"
      ],
      "text/plain": [
       "Hist(Regular(20, 0, 100, name='mass', label='mass [GeV]'), storage=Double()) # Sum: 852.0 (1000.0 with flow)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bkg_hist = hist.Hist.new.Reg(20, 0, 100, name=\"mass\", label=\"mass [GeV]\").Double().fill(rng.exponential(50, 1000))\n",
    "bkg_hist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = rl.Model(\"simplemodel\")\n",
    "lumi = rl.NuisanceParameter(\"CMS_lumi\", \"lnN\")\n",
    "\n",
    "cr = rl.Channel(\"cr\")\n",
    "model.addChannel(cr)\n",
    "\n",
    "crbkg = rl.TemplateSample(\"cr_background\", rl.Sample.BACKGROUND, bkg_hist * 10)\n",
    "crbkg.setParamEffect(lumi, 0.03)\n",
    "cr.addSample(crbkg)\n",
    "cr.setObservation(bkg_hist * 10)\n",
    "\n",
    "sigregion = rl.Channel(\"sigregion\")\n",
    "model.addChannel(sigregion)\n",
    "\n",
    "signal = rl.TemplateSample(\"sigregion_signal\", rl.Sample.SIGNAL, signal_hist)\n",
    "signal.setParamEffect(lumi, 0.03)\n",
    "sigregion.addSample(signal)\n",
    "\n",
    "tf = np.array([rl.IndependentParameter(f\"tfbin{i}\", 1.0, 0.5, 1.5) for i in range(cr.observable.nbins)])\n",
    "background = rl.TransferFactorSample(\"sigregion_background\", rl.Sample.BACKGROUND, tf, crbkg)\n",
    "sigregion.addSample(background)\n",
    "\n",
    "fakeobs = signal_hist + bkg_hist\n",
    "sigregion.setObservation(fakeobs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ncsmith/src/rhalphalib/.nox/tests/lib/python3.13/site-packages/rhalphalib/sample.py:672: RuntimeWarning: Could not load RooParametricHist, falling back to RooParametricStepFunction, which has strange rounding issues.\n",
      "Set ParametericSample.PreferRooParametricHist = False to disable this warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RooSimultaneous::simplemodel_simPdf[ indexCat=simplemodel_channel cr=cr sigregion=sigregion ] = 3.54545\n",
      "RooDataHist::simplemodel_observation[simplemodel_channel,mass] = 40 bins (9472 weights)\n",
      "\n",
      "  RooFitResult: minimized FCN value: 23305.5, estimated distance to minimum: 0.000210152\n",
      "                covariance matrix quality: Full, accurate covariance matrix\n",
      "                Status : MINIMIZE=0 HESSE=0 \n",
      "\n",
      "    Floating Parameter    FinalValue +/-  Error   \n",
      "  --------------------  --------------------------\n",
      "              CMS_lumi   -4.3787e-01 +/-  1.52e-02\n",
      "                tfbin0    1.5000e+00 +/-  2.45e-02\n",
      "                tfbin1    1.5000e+00 +/-  6.46e-02\n",
      "               tfbin10    1.3048e+00 +/-  1.78e-01\n",
      "               tfbin11    1.2683e+00 +/-  1.76e-01\n",
      "               tfbin12    5.0000e-01 +/-  2.92e-02\n",
      "               tfbin13    5.8167e-01 +/-  1.13e-01\n",
      "               tfbin14    5.5703e-01 +/-  1.09e-01\n",
      "               tfbin15    5.6010e-01 +/-  1.09e-01\n",
      "               tfbin16    5.0000e-01 +/-  5.81e-02\n",
      "               tfbin17    5.0000e-01 +/-  2.43e-02\n",
      "               tfbin18    5.0000e-01 +/-  1.88e-02\n",
      "               tfbin19    5.0000e-01 +/-  2.21e-02\n",
      "                tfbin2    1.4999e+00 +/-  7.06e-01\n",
      "                tfbin3    1.5000e+00 +/-  1.34e-01\n",
      "                tfbin4    1.3786e+00 +/-  1.77e-01\n",
      "                tfbin5    1.1843e+00 +/-  1.68e-01\n",
      "                tfbin6    1.3502e+00 +/-  1.77e-01\n",
      "                tfbin7    1.2532e+00 +/-  1.73e-01\n",
      "                tfbin8    9.3695e-01 +/-  1.50e-01\n",
      "                tfbin9    1.4129e+00 +/-  1.78e-01\n",
      "\n"
     ]
    }
   ],
   "source": [
    "ws = ROOT.RooWorkspace(\"simplemodel\")\n",
    "pdf, data = model.renderRoofit(ws)\n",
    "pdf.Print()\n",
    "data.Print()\n",
    "fit = pdf.fitTo(\n",
    "    data,\n",
    "    ROOT.RooFit.Extended(True),\n",
    "    ROOT.RooFit.Minimizer(\"Minuit2\", \"migrad\"),\n",
    "    ROOT.RooFit.Save(),\n",
    "    ROOT.RooFit.PrintLevel(-1),\n",
    ")\n",
    "fit.Print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.patches.StepPatch at 0x3152b38c0>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.readRooFitResult(fit)\n",
    "tfvalues = np.array([b.value for b in tf])\n",
    "\n",
    "plt.stairs(tfvalues, sigregion.observable.binning, label=\"Transfer factor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tests",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
